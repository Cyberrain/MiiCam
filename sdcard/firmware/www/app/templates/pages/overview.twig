{% extends "base/layout.twig" %}

{% block head_extra %}
<script src="/static/js/vue.min.js"></script>
<script src="/static/js/axios.min.js"></script>
{% endblock %}

{% block body %}
<div style="padding:0 16px;">
    <h1>Chuangmi 720P Service Overview</h1>
    <div id="app">
        <table style="width:50%" id="table-services">
            <thead>
                <tr>
                    <th @click="sort('name')">Name</th>
                    <th @click="sort('running')">Running</th>
                    <th @click="sort('managed')">Managed</th>
                </tr>
            </thead>
            <tbody>
                <tr v-for="service in SortedServices">
                    <td>${ service.name }</td>
                    <td>${ service.running }</td>
                    <td>${ service.managed }</td>
                </tr>
            </tbody>
        </table>
        <p>
            <button @click="prevPage">Previous</button>
            <button @click="nextPage">Next</button>
            <p>Current Page: ${currentPage}</p>
        </p>
    </div>
</div>

<script>
    const app = new Vue({
        delimiters: ['${', '}'],
        el: '#app',
        data: {
            services: [],
            currentSort:'name',
            currentSortDir:'asc',
            pageSize:8,
            currentPage:1
        },
        created: function() {
            var url = `/api/services/state`;
            axios.get(url)
                .then(response => {
                    this.services = response.data;
                });
        },
        methods: {
            sort: function(s) {
                //if s == current sort, reverse
                if(s === this.currentSort) {
                    this.currentSortDir = this.currentSortDir==='asc'?'desc':'asc';
                }
                this.currentSort = s;
            },
            nextPage: function() {
                if((this.currentPage*this.pageSize) < this.services.length) this.currentPage++;
            },
            prevPage: function() {
                if(this.currentPage > 1) this.currentPage--;
            }
        },
        computed:{
            SortedServices: function() {
                return this.services.sort((a,b) => {
                    let modifier = 1;
                    if(this.currentSortDir === 'desc') modifier = -1;
                    if(a[this.currentSort] < b[this.currentSort]) return -1 * modifier;
                    if(a[this.currentSort] > b[this.currentSort]) return 1 * modifier;
                    return 0;
                }).filter((row, index) => {
                    let start = (this.currentPage-1)*this.pageSize;
                    let end = this.currentPage*this.pageSize;
                    if(index >= start && index < end) return true;
                });
            }
        }
    });
</script>
{% endblock %}


