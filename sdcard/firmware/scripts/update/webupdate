#!/bin/sh
INPUT="$1"

PATH="/tmp/sd/firmware/scripts/update:$PATH"

WEBSITETGZ="/tmp/sd/website.tgz"
WEBSITESUM="/tmp/sd/website.md5sum"
WEBSITEDIR="/tmp/sd/firmware/www"

## Set the curl command depending on local or camera
if [ "$( uname -m )" == "armv5tel" ]
then
    CURL='curl --cacert /tmp/sd/firmware/share/ssl/cacert.pem -qs '
    WGET='/tmp/sd/firmware/bin/wget --ca-certificate /tmp/sd/firmware/share/ssl/cacert.pem '
else
    CURL='curl -qs '
    WGET='wget '
fi

log() { echo "*** ${*}" > /dev/stderr; }

die() { log "ERROR: ${*}"; exit 1; }


rollback()
{
    if [ -d "${WEBSITEDIR}.old" ]
    then
        echo "*** Removing older rollback leftovers if present"
        [ -d "${WEBSITEDIR}.broken" ] && rm -rf "${WEBSITEDIR}.broken"

        echo "*** Moving ${WEBSITEDIR}.old back to ${WEBSITEDIR}"
        mv "${WEBSITEDIR}" "${WEBSITEDIR}.broken" \
        && mv "${WEBSITEDIR}.old" "${WEBSITEDIR}" \
        && echo "*** Rollback completed"
    else
        echo "*** I'm sorry but a rollback is not possible"
        echo "*** The ${WEBSITEDIR}.old cannot be found."
        exit 1
    fi
}


###################################################################
## Download and Update functions to download latest release      ##
###################################################################

check_versions()
{
    ## Get versions of current and latest
    local LATEST_VERSION="$(  webversion --latest  )" || die "Failed to retrieve the tag of the latest version"
    local CURRENT_VERSION="$( webversion --current )" || die "Failed to retrieve the tag of the current version"

    echo "*** Current version is: $CURRENT_VERSION"
    echo "***  Latest version is: $LATEST_VERSION"

    ## Download if a newer version is available
    if [ "$LATEST_VERSION" -eq "$CURRENT_VERSION" ] ;
    then
        echo "*** You are already using the latest version available"
        exit 0
    fi
}

download_release()
{
    echo "Getting latest website download location"

    local API="https://api.github.com/repos/miicam/miicam/releases/latest"
    local JQ_STRING='.assets | to_entries[] | select(.value.browser_download_url | contains("website")) | .value.browser_download_url'
    local WEBSITE_URLS="$( curl -s "${API}" | jq -r "${JQ_STRING}" )"

    [ "x${WEBSITE_URLS}" == "x" ] && die "Website content urls not found! Exiting upgrade"

    echo "Removing older downloads"
    [ -f "${WEBSITETGZ}" ] && rm "${WEBSITETGZ}"
    [ -f "${WEBSITESUM}" ] && rm "${WEBSITESUM}"

    echo "Downloading latest release files"
    cd /tmp/sd
    for URL in ${WEBSITE_URLS}
    do
        OUTPUT="/tmp/sd/$( basename "$URL" )"
        ${WGET} -q -t 5 -T 10 -O "${OUTPUT}" -c "$URL" || die "Failed to download from $URL"
    done

    [ -f "${WEBSITETGZ}" ] || die "Failed to download ${WEBSITETGZ}"
    [ -f "${WEBSITESUM}" ] || die "Failed to download ${WEBSITESUM}"

    return 0
}

verify_release()
{
    [ -f "${WEBSITESUM}" ] || die "File ${WEBSITESUM} not found!"

    if md5sum -s -c "${WEBSITESUM}"
    then
        echo "Sums OK: $( cat ${WEBSITESUM} )"
        return 0
    else
        echo "An error appeared during download: The sums don't match!"
        echo "Sum in file: $(cat ${WEBSITESUM} )"
        echo "Actual Sum: $( md5sum ${WEBSITESUM} )"
        return 1
    fi

}

update_release()
{
    if check_versions
    then
        echo "*** Downloading the latest webui release"
        download_release
        verify_release
    fi

    ## Create the new webdir
    test -d "${WEBSITEDIR}.new" && rm -rf "${WEBSITEDIR}.new"
    mkdir "${WEBSITEDIR}.new" || die "*** F"

    ## Remove the backup dest dir
    test -d "${WEBSITEDIR}.old" && rm -rf "${WEBSITEDIR}.old"

    ## Unpack the tarbal
    if [ -f "$WEBSITETGZ" ]
    then
        echo "*** Unpacking $WEBSITETGZ"
        tar xzf "$WEBSITETGZ" -C "${WEBSITEDIR}.new" || die "Failed to unpack $WEBSITETGZ"
        NEWVERSION="$( webversion --file "${WEBSITEDIR}.new/public/static/version.json" )"
    fi

    local LATEST_VERSION="$(  webversion --latest  )" || die "Failed to retrieve the tag of the latest version"

    if [ -n "$NEWVERSION" ] && [ "$NEWVERSION" == "$LATEST_VERSION" ]
    then
        echo "*** Swapping newer web ui version with the current one"
        mv "${WEBSITEDIR}" "${WEBSITEDIR}.old" && \
        mv "${WEBSITEDIR}.new" "${WEBSITEDIR}" && \
        echo "*** Update completed"
    else
        die "Versions do not match: new: \"$NEWVERSION\", expected: \"$LATEST_VERSION\""
    fi

    return 0
}


###################################################################
## The main function                                             ##
###################################################################

main()
{
    case "$INPUT" in
        --update)
            update_release
            ;;
        --rollback)
            rollback
            ;;
        *)
            echo "Usage: $0 [--update|--rollback]"
            echo "Update the web interface if needed"
            echo
            echo "--update                - Check the version and download if required"
            echo
            echo "--rollback              - Rollback to the latest version (If possible)"
            echo
            exit 0
        ;;
    esac

}

main
